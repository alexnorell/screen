[build-system]
# These are the assumed default build requirements from pip:
# https://pip.pypa.io/en/stable/reference/pip/#pep-517-and-518-support
requires = ["setuptools>=40.8.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.pylint."MASTER"]
# Specify a score threshold to be exceeded before program exits with error.
fail-under=10
# Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the
# number of processors available to use.
jobs=0

# Pickle collected data for later comparisons.
persistent="no"


[tool.pylint."REPORTS"]
# Python expression which should return a score less than or equal to 10. You
# have access to the variables 'error', 'warning', 'refactor', and 'convention'
# which contain the number of messages in each category, as well as 'statement'
# which is the total number of statements analyzed. This score is used by the
# global evaluation report (RP0004).
evaluation="10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)"

# Set the output format. Available formats are text, parseable, colorized, json
# and msvs (visual studio). You can also give a reporter class, e.g.
# mypackage.mymodule.MyReporterClass.
output-format="colorized"

# Tells whether to display a full report or only the messages.
reports="yes"

# Activate the evaluation score.
score="yes"

[tool.pylint."REFACTORING"]
# Maximum number of nested blocks for function / method body
max-nested-blocks=5


[tool.pylint."LOGGING"]
# The type of string formatting that logging methods do. `old` means using %
# formatting, `new` is for `{}` formatting.
logging-format-style="new"

[tool.pylint."MISCELLANEOUS"]
# List of note tags to take in consideration, separated by a comma.
notes="FIXME,TODO"

[tool.pylint."VARIABLES"]
# Tells whether unused global variables should be treated as a violation.
allow-global-unused-variables="no"


[tool.pylint."FORMAT"]
# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.
expected-line-ending-format="LF"

# Number of spaces of indent required inside a hanging or continued line.
indent-after-paren=4

# String used as indentation unit. This is usually "    " (4 spaces) or "\t" (1
# tab).
indent-string='    '

# Maximum number of characters on a single line.
max-line-length=80

# Maximum number of lines in a module.
max-module-lines=1000

# List of optional constructs for which whitespace checking is disabled. `dict-
# separator` is used to allow tabulation in dicts, etc.: {1  : 1,\n222: 2}.
# `trailing-comma` allows a space between comma and closing bracket: (a, ).
# `empty-line` allows space-only lines.
no-space-check="trailing-comma,dict-separator"

# Allow the body of a class to be on the same line as the declaration if body
# contains single statement.
single-line-class-stmt="no"

# Allow the body of an if to be on the same line as the test if there is no
# else.
single-line-if-stmt="no"

[tool.pylint."SIMILARITIES"]
# Ignore comments when computing similarities.
ignore-comments="yes"

# Ignore docstrings when computing similarities.
ignore-docstrings="yes"

# Ignore imports when computing similarities.
ignore-imports="no"

# Minimum lines number of a similarity.
min-similarity-lines=3

[tool.pylint."BASIC"]
# Naming style matching correct argument names.
argument-naming-style="snake_case"

# Naming style matching correct attribute names.
attr-naming-style="snake_case"

# Naming style matching correct class attribute names.
class-attribute-naming-style="any"

# Naming style matching correct class names.
class-naming-style="PascalCase"

# Naming style matching correct constant names.
const-naming-style="UPPER_CASE"

# Minimum line length for functions/classes that require docstrings, shorter
# ones are exempt.
docstring-min-length=-1

# Naming style matching correct function names.
function-naming-style="snake_case"

# Good variable names which should always be accepted, separated by a comma.
good-names="i,j,k,ex,Run,_"

# Include a hint for the correct naming format with invalid-name.
include-naming-hint="yes"

# Naming style matching correct method names.
method-naming-style="snake_case"

# Naming style matching correct module names.
module-naming-style="snake_case"

# Naming style matching correct variable names.
variable-naming-style="snake_case"


[tool.pylint."STRING"]
# This flag controls whether inconsistent-quotes generates a warning when the
# character used as a quote delimiter is used inconsistently within a module.
check-quote-consistency="yes"

# This flag controls whether the implicit-str-concat should generate a warning
# on implicit string concatenation in sequences defined over several lines.
check-str-concat-over-line-jumps="yes"


[tool.pylint."IMPORTS"]
# Allow wildcard imports from modules that define __all__.
allow-wildcard-with-all="no"

# Deprecated modules which should not be used, separated by a comma.
deprecated-modules="optparse,tkinter.tix"

[tool.pylint."EXCEPTIONS"]
# Exceptions that will emit a warning when being caught. Defaults to
# "BaseException, Exception".
overgeneral-exceptions="BaseException,Exception"
